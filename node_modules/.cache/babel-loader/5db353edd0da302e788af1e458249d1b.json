{"remainingRequest":"C:\\GitTest\\vue-mooc\\node_modules\\babel-loader\\lib\\index.js!C:\\GitTest\\vue-mooc\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\GitTest\\vue-mooc\\src\\base\\message\\message.js","dependencies":[{"path":"C:\\GitTest\\vue-mooc\\src\\base\\message\\message.js","mtime":1698894932449},{"path":"C:\\GitTest\\vue-mooc\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1698895099045},{"path":"C:\\GitTest\\vue-mooc\\node_modules\\babel-loader\\lib\\index.js","mtime":1698895100317},{"path":"C:\\GitTest\\vue-mooc\\node_modules\\eslint-loader\\index.js","mtime":1698895096052}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.array.find-index\";\nimport Vue from 'vue';\nimport MessageVue from \"./message.vue\";\nvar messageConstructor = Vue.extend(MessageVue);\nvar seed = 1;\nvar zIndex = 2000;\nvar instance = undefined;\nvar instances = [];\nvar types = ['success', 'warning', 'error', 'info'];\nvar OFFSET = 20;\nvar MESSAGE_OFFSET = 16;\n\nvar Message = function Message() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (typeof options === 'string') {\n    options = {\n      message: options\n    };\n  }\n\n  var verticalOffset = options.offset || OFFSET;\n  var id = \"message\".concat(seed++);\n\n  options.onClose = function () {\n    Message.close(id);\n  };\n\n  instance = new messageConstructor({\n    data: options\n  });\n  instance.id = id;\n  instance.$mount();\n  document.body.appendChild(instance.$el);\n  instances.forEach(function (item) {\n    verticalOffset += item.$el.offsetHeight + MESSAGE_OFFSET;\n  });\n  instance.verticalOffset = verticalOffset;\n  instance.visible = true;\n  instance.$el.style.zIndex = zIndex++;\n  instances.push(instance);\n  return instances;\n};\n\ntypes.forEach(function (type) {\n  Message[type] = function (options) {\n    if (typeof options === 'string') {\n      options = {\n        message: options\n      };\n    }\n\n    options.type = type;\n    return Message(options);\n  };\n});\n\nMessage.close = function (id) {\n  var len = instances.length;\n  var findIndex = instances.findIndex(function (item) {\n    return item.id === id;\n  });\n\n  if (findIndex !== -1) {\n    instances.splice(findIndex, 1);\n  }\n\n  if (len <= 1 || findIndex === -1) {\n    return;\n  }\n\n  var removeOffsetHeight = instances[findIndex].$el.offsetHeight;\n\n  for (var index = findIndex; index < len - 1; index++) {\n    var dom = instances[index].$el;\n    dom.style.top = parseInt(dom.style.top, 10) - removeOffsetHeight - MESSAGE_OFFSET + 'px';\n  }\n};\n\nMessage.closeAll = function () {\n  for (var index = instances.length - 1; index >= 0; index--) {\n    instances[index].close();\n  }\n};\n\nexport default Message;",{"version":3,"sources":["C:\\GitTest\\vue-mooc\\src\\base\\message\\message.js"],"names":["Vue","MessageVue","messageConstructor","extend","seed","zIndex","instance","undefined","instances","types","OFFSET","MESSAGE_OFFSET","Message","options","message","verticalOffset","offset","id","onClose","close","data","$mount","document","body","appendChild","$el","forEach","item","offsetHeight","visible","style","push","type","len","length","findIndex","splice","removeOffsetHeight","index","dom","top","parseInt","closeAll"],"mappings":"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","sourcesContent":["import Vue from 'vue'\r\nimport MessageVue from './message.vue'\r\nlet messageConstructor = Vue.extend(MessageVue)\r\nlet seed = 1\r\nlet zIndex = 2000\r\nlet instance = undefined\r\nlet instances = []\r\nlet types = ['success', 'warning', 'error', 'info']\r\n\r\nconst OFFSET = 20\r\nconst MESSAGE_OFFSET = 16\r\n\r\nconst Message = function (options = {}) {\r\n  if (typeof options === 'string') {\r\n    options = {\r\n      message: options\r\n    }\r\n  }\r\n  let verticalOffset = options.offset || OFFSET\r\n  let id = `message${seed++}`\r\n  options.onClose = function () {\r\n    Message.close(id)\r\n  }\r\n  instance = new messageConstructor({\r\n    data: options\r\n  })\r\n  instance.id = id\r\n  instance.$mount()\r\n  document.body.appendChild(instance.$el)\r\n  instances.forEach(item => {\r\n    verticalOffset += item.$el.offsetHeight + MESSAGE_OFFSET\r\n  })\r\n  instance.verticalOffset = verticalOffset\r\n  instance.visible = true\r\n  instance.$el.style.zIndex = zIndex++\r\n  instances.push(instance)\r\n  return instances\r\n}\r\n\r\ntypes.forEach(type => {\r\n  Message[type] = options => {\r\n    if (typeof options === 'string') {\r\n      options = {\r\n        message: options\r\n      }\r\n    }\r\n    options.type = type\r\n    return Message(options)\r\n  }\r\n})\r\n\r\nMessage.close = function (id) {\r\n  let len = instances.length\r\n  let findIndex = instances.findIndex(item => item.id === id)\r\n  if (findIndex !== -1) {\r\n    instances.splice(findIndex, 1)\r\n  }\r\n  if (len <= 1 || findIndex === -1) {\r\n    return\r\n  }\r\n  let removeOffsetHeight = instances[findIndex].$el.offsetHeight\r\n  for (let index = findIndex; index < len - 1; index++) {\r\n    let dom = instances[index].$el\r\n    dom.style.top = parseInt(dom.style.top, 10) - removeOffsetHeight - MESSAGE_OFFSET + 'px'\r\n  }\r\n}\r\n\r\nMessage.closeAll = function () {\r\n  for (let index = instances.length - 1; index >= 0; index--) {\r\n    instances[index].close()\r\n  }\r\n}\r\n\r\nexport default Message"]}]}