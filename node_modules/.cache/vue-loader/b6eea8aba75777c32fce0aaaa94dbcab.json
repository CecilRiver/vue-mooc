{"remainingRequest":"C:\\GitTest\\vue-mooc\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\GitTest\\vue-mooc\\src\\pages\\order\\edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\GitTest\\vue-mooc\\src\\pages\\order\\edit.vue","mtime":1700096320735},{"path":"C:\\GitTest\\vue-mooc\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1698895099045},{"path":"C:\\GitTest\\vue-mooc\\node_modules\\babel-loader\\lib\\index.js","mtime":1698895100317},{"path":"C:\\GitTest\\vue-mooc\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1698895099045},{"path":"C:\\GitTest\\vue-mooc\\node_modules\\vue-loader\\lib\\index.js","mtime":1698895084158}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\r\nimport Editor from 'wangeditor';\r\n// import 'wangeditor/release/wangEditor.min.css';\r\n\r\nexport default {\r\n    name: 'Editor',\r\n    props: {\r\n        value: {\r\n            type: String,\r\n            default: ''\r\n        },\r\n        /**\r\n         * 绑定的值的类型, enum: ['html']\r\n         */\r\n        valueType: {\r\n            type: String,\r\n            default: 'html'\r\n        },\r\n\r\n        /**\r\n         * @description 设置change事件触发时间间隔\r\n         */\r\n        changeInterval: {\r\n            type: Number,\r\n            default: 200\r\n        },\r\n        /**\r\n         * @description 是否开启本地存储\r\n         */\r\n        cache: {\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    data() {\r\n        return {};\r\n    },\r\n\r\n    computed: {\r\n        editorId() {\r\n            return `editor${this._uid}`;\r\n        }\r\n    },\r\n\r\n    watch: {\r\n        value(newValue, oldValue) {\r\n            // console.log(newValue);\r\n            // 解决页面第一次加载后获取的数据无法渲染到富文本的问题\r\n            this._setHtmlOnce(newValue);\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        setHtml(val) {\r\n            this.editor.txt.html(val);\r\n        },\r\n\r\n        setEditorHeight() {\r\n            let el = document.querySelector('.w-e-text-container');\r\n\r\n            el.style.minHeight = '300px';\r\n            el.style.height = '';\r\n        },\r\n\r\n        _setHtmlOnce(val) {\r\n            if (!this.__setHtmlCount) {\r\n                this.editor.txt.html(val);\r\n                this.__setHtmlCount = 1;\r\n            }\r\n        }\r\n    },\r\n\r\n    mounted() {\r\n        this.editor = new Editor(`#${this.editorId}`);\r\n        this.editor.customConfig.onchange = html => {\r\n            let text = this.editor.txt.text();\r\n            // if (this.cache) localStorage.editorCache = html;\r\n            this.$emit('input', this.valueType === 'html' ? html : text);\r\n            this.$emit('on-change', html, text);\r\n        };\r\n        this.editor.customConfig.onchangeTimeout = this.changeInterval;\r\n        this.editor.customConfig.showLinkImg = false;\r\n        // this.editor.customConfig.uploadImgShowBase64 = true;\r\n        // create这个方法一定要在所有配置项之后调用\r\n\r\n        this.editor.create();\r\n        // this.setEditorHeight();\r\n        // 如果本地有存储加载本地存储内容\r\n        // let html = this.value || localStorage.editorCache;\r\n\r\n        let html = this.value;\r\n        if (html) this.editor.txt.html(html);\r\n    }\r\n};\r\n",{"version":3,"sources":["edit.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"edit.vue","sourceRoot":"src/pages/order","sourcesContent":["<template>\r\n    <div class=\"editor-wrapper\">\r\n        <div :id=\"editorId\" class=\"editor-div\"></div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport Editor from 'wangeditor';\r\n// import 'wangeditor/release/wangEditor.min.css';\r\n\r\nexport default {\r\n    name: 'Editor',\r\n    props: {\r\n        value: {\r\n            type: String,\r\n            default: ''\r\n        },\r\n        /**\r\n         * 绑定的值的类型, enum: ['html']\r\n         */\r\n        valueType: {\r\n            type: String,\r\n            default: 'html'\r\n        },\r\n\r\n        /**\r\n         * @description 设置change事件触发时间间隔\r\n         */\r\n        changeInterval: {\r\n            type: Number,\r\n            default: 200\r\n        },\r\n        /**\r\n         * @description 是否开启本地存储\r\n         */\r\n        cache: {\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    data() {\r\n        return {};\r\n    },\r\n\r\n    computed: {\r\n        editorId() {\r\n            return `editor${this._uid}`;\r\n        }\r\n    },\r\n\r\n    watch: {\r\n        value(newValue, oldValue) {\r\n            // console.log(newValue);\r\n            // 解决页面第一次加载后获取的数据无法渲染到富文本的问题\r\n            this._setHtmlOnce(newValue);\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        setHtml(val) {\r\n            this.editor.txt.html(val);\r\n        },\r\n\r\n        setEditorHeight() {\r\n            let el = document.querySelector('.w-e-text-container');\r\n\r\n            el.style.minHeight = '300px';\r\n            el.style.height = '';\r\n        },\r\n\r\n        _setHtmlOnce(val) {\r\n            if (!this.__setHtmlCount) {\r\n                this.editor.txt.html(val);\r\n                this.__setHtmlCount = 1;\r\n            }\r\n        }\r\n    },\r\n\r\n    mounted() {\r\n        this.editor = new Editor(`#${this.editorId}`);\r\n        this.editor.customConfig.onchange = html => {\r\n            let text = this.editor.txt.text();\r\n            // if (this.cache) localStorage.editorCache = html;\r\n            this.$emit('input', this.valueType === 'html' ? html : text);\r\n            this.$emit('on-change', html, text);\r\n        };\r\n        this.editor.customConfig.onchangeTimeout = this.changeInterval;\r\n        this.editor.customConfig.showLinkImg = false;\r\n        // this.editor.customConfig.uploadImgShowBase64 = true;\r\n        // create这个方法一定要在所有配置项之后调用\r\n\r\n        this.editor.create();\r\n        // this.setEditorHeight();\r\n        // 如果本地有存储加载本地存储内容\r\n        // let html = this.value || localStorage.editorCache;\r\n\r\n        let html = this.value;\r\n        if (html) this.editor.txt.html(html);\r\n    }\r\n};\r\n</script>\r\n\r\n\r\n"]}]}