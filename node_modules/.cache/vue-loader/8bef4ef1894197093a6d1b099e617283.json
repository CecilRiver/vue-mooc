{"remainingRequest":"C:\\GitTest\\vue-mooc\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\GitTest\\vue-mooc\\src\\components\\login\\login.vue?vue&type=style&index=0&id=dd7a443a&lang=stylus&scoped=true&","dependencies":[{"path":"C:\\GitTest\\vue-mooc\\src\\components\\login\\login.vue","mtime":1699584629192},{"path":"C:\\GitTest\\vue-mooc\\node_modules\\css-loader\\index.js","mtime":1698895097390},{"path":"C:\\GitTest\\vue-mooc\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1698895084165},{"path":"C:\\GitTest\\vue-mooc\\node_modules\\postcss-loader\\src\\index.js","mtime":1698895087734},{"path":"C:\\GitTest\\vue-mooc\\node_modules\\stylus-loader\\index.js","mtime":1698895086074},{"path":"C:\\GitTest\\vue-mooc\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1698895099045},{"path":"C:\\GitTest\\vue-mooc\\node_modules\\vue-loader\\lib\\index.js","mtime":1698895084158}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import '~assets/stylus/login-form.styl';\n",{"version":3,"sources":["login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqLA","file":"login.vue","sourceRoot":"src/components/login","sourcesContent":["<template>\r\n  <div class=\"login-way\">\r\n    <el-form ref=\"loginForm\" :model=\"loginForm\" :rules=\"rules\">\r\n      <el-form-item prop=\"username\">\r\n        <el-input ref=\"username\" v-model.trim=\"loginForm.username\" placeholder=\"请输入用户名\" clearable />\r\n      </el-form-item>\r\n      <el-form-item prop=\"password\">\r\n        <el-input ref=\"passowrd\" v-model.trim=\"loginForm.password\" placeholder=\"请输入密码\" show-password />\r\n      </el-form-item>\r\n      <el-form-item v-if=\"index === 1\" prop=\"ckpassword\">\r\n        <el-input v-model.trim=\"loginForm.ckpassword\" placeholder=\"请再次输入密码\" show-password />\r\n      </el-form-item>\r\n      <el-form-item class=\"auto-login-item\">\r\n        <template v-if=\"index == 0\">\r\n          <el-checkbox v-model=\"loginForm.auto\">\r\n            七天内自动登录\r\n          </el-checkbox>\r\n          <div class=\"auto-login-btn-box\">\r\n            <span>找回密码</span>\r\n            <span>无法登陆</span>\r\n          </div>\r\n        </template>\r\n        <template v-else>\r\n          <el-checkbox v-model=\"loginForm.argement\">\r\n            同意\r\n          </el-checkbox>\r\n          <span class=\"agreement\">《用户注册协议》</span>\r\n        </template>\r\n      </el-form-item>\r\n    </el-form>\r\n    <button\r\n      class=\"login-btn\"\r\n      :class=\"{'is-loading': isLoading || (index == 1 && !loginForm.argement)}\"\r\n      @click=\"handleValidateForm\"\r\n    >\r\n      {{ btnText }}\r\n    </button>\r\n  </div>\r\n</template>\r\n<script>\r\nimport crypto from 'crypto-js'\r\nimport { mapMutations } from 'vuex'\r\nimport { userLogin, userRegister } from 'api/user.js'\r\nimport { ERR_OK } from 'api/config.js'\r\nimport axios from 'utils/axios.js'\r\n\r\n// 设置axios的baseURL\r\naxios.defaults.baseURL = 'http://127.0.0.1:10000/';\r\naxios.defaults.withCredentials = false;// Cookie跨域\r\nexport default {\r\n  props: {\r\n    index: Number\r\n  },\r\n  data () {\r\n    const checkPassword = (rule, value, callback) => {\r\n      if (!value) {\r\n        callback(new Error('请再次输入密码'))\r\n      } else if (value !== this.loginForm.password) {\r\n        callback(new Error('两次输入的密码不一致'))\r\n      } else {\r\n        callback()\r\n      }\r\n    }\r\n    const rules = {\r\n      username: [\r\n        { required: true, message: '请输入用户名', trigger: 'blur' }\r\n      ],\r\n      password: [\r\n        { required: true, message: '请输入密码', trigger: 'blur' }\r\n      ],\r\n      ckpassword: [\r\n        { required: true, message: '请再次输入密码', trigger: 'blur' },\r\n        { validator: checkPassword, trigger: 'blur' }\r\n      ]\r\n    }\r\n    return {\r\n      isLoading: false,\r\n      rules: rules,\r\n      loginForm: {\r\n        username: '',\r\n        password: '',\r\n        ckpassword: '',\r\n        auto: true,\r\n        argement: false\r\n      }\r\n    }\r\n  },\r\n  mounted () {\r\n    // 自动聚焦\r\n    const usernameRef = this.$refs.username\r\n    const passwordRef = this.$refs.password\r\n    if (!this.loginForm.username) {\r\n      usernameRef.focus()\r\n    } else if (!this.loginForm.password) {\r\n      passwordRef.focus()\r\n    }\r\n    // 监听enter事件\r\n    window.addEventListener('keyup', this.handleListenKeyup)\r\n  },\r\n  methods: {\r\n    // 表单校验\r\n    handleValidateForm () {\r\n      if (this.isLoading || (this.index === 1 && !this.loginForm.argement)) {\r\n        return false\r\n      }\r\n      this.$refs['loginForm'].validate((valid) => {\r\n        if (valid) {\r\n          this.handleBtnClick()\r\n        }\r\n      })\r\n    },\r\n    // 按钮点击\r\n    handleBtnClick () {\r\n      const params = {\r\n        username: this.loginForm.username,\r\n        //MD5加密，未启用\r\n        //password: crypto.MD5(this.loginForm.password).toString()\r\n        password: this.loginForm.password\r\n      }\r\n      // 判断是登陆还是注册\r\n      const func = this.index === 0 ? userLogin : userRegister\r\n      const tips = this.index === 0 ? '登录' : '注册'\r\n      this.isLoading = true\r\n      func(params).then(res => {\r\n        this.isLoading = false\r\n        let { msg, code, page } = res\r\n        if (code !== ERR_OK) {\r\n          this.loginForm.password = ''\r\n          this.loginForm.ckpassword = ''\r\n          this.loginForm.argement = false\r\n          this.$message.error(msg)\r\n          return false\r\n        }\r\n        this.$message.success(`${tips}成功`)\r\n        this.loginForm = {}\r\n        // 缓存用户数据\r\n        this.setUserInfo(page.list)\r\n        // console.log(\"lll\")\r\n        // console.log(userInfo)\r\n      \r\n        // 关闭弹窗\r\n        this.setShowLogin(false)\r\n      }).catch(() => {\r\n        this.isLoading = false\r\n        this.$message.error('服务器异常')\r\n      })\r\n    },\r\n    // 监听页面enter事件\r\n    handleListenKeyup (e) {\r\n      if (e.keyCode === 13) {\r\n        this.handleValidateForm()\r\n      }\r\n    },\r\n    // vuex\r\n    ...mapMutations('login', {\r\n      'setUserInfo': 'SET_USER_INFO',\r\n      'setShowLogin': 'SET_SHOW_LOGIN'\r\n    })\r\n  },\r\n  watch: {\r\n    index () {\r\n      this.$refs.loginForm.resetFields()\r\n    }\r\n  },\r\n  computed: {\r\n    btnText () {\r\n      let text = ''\r\n      if (this.index === 0) {\r\n        text = this.isLoading ? '登录中...' : '登录'\r\n      } else {\r\n        text = this.isLoading ? '注册中...' : '注册'\r\n      }\r\n      return text\r\n    }\r\n  },\r\n  beforeDestroy () {\r\n    window.removeEventListener('keyup', this.handleListenKeyup)\r\n  }\r\n}\r\n</script>\r\n<style lang=\"stylus\" scoped>\r\n  @import '~assets/stylus/login-form.styl';\r\n</style>\r\n"]}]}